name: "Deployment Common"

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      ref_name:
        required: true
        type: string
      deploy_target:
        required: true
        type: string

jobs:
  #############################################################################
  # Build the app and push the Docker image to Artifact Repository            #
  #############################################################################
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ## Authenticate using the service account set up in `setup-google-cloud.sh`
      - name: Auth GoogleCloud
        id: auth-google-cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.project_name }}-github-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      ## Initially, an Artifact Repository will be created
      - name: Create Artifacts Repository
        run: |
          if gcloud artifacts repositories describe "${{ inputs.repo_name }}" --location="${{ vars.GOOGLE_CLOUD_REGION }}" --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"; then
            echo "Artifacts Repository exists"
          else
            gcloud artifacts repositories create ${{ inputs.repo_name }} \
              --repository-format="docker" \
              --location="${{ vars.GOOGLE_CLOUD_REGION }}" \
              --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          fi

      - name: Auth Docker
        uses: docker/login-action@v1
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth-google-cloud.outputs.access_token }}"
          registry: "${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev"

      - name: Generate Image
        id: generate_image
        run: |
          IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app_name }}/${{ inputs.environment }}"
          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ inputs.app_name }}/Dockerfile
          build-args: |
            CLOUD_RUN_API_SERVICE_URL=https://${{ inputs.project_name }}-api-${{ inputs.environment }}-${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}.${{ vars.GOOGLE_CLOUD_REGION }}.run.app
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.generate_image.outputs.docker_image }}:${{ inputs.app_version }}
            ${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}
            ${{ steps.generate_image.outputs.docker_image }}:latest
          cache-from: type=gha,scope=${{ inputs.app_name }}-${{ inputs.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ inputs.app_name }}-${{ inputs.ref_name }}

      - name: Create Service declaration
        if: ${{ inputs.deploy_target == 'cloudrun' }}
        run: |
          APP_NAME="${{ inputs.app_name }}"
          ENVIRONMENT="${{ inputs.environment }}"
          PROJECT_NAME="${{ inputs.project_name }}"
          GOOGLE_CLOUD_PROJECT_ID="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          SERVICE="$PROJECT_NAME-$APP_NAME-$ENVIRONMENT"
          GOOGLE_CLOUD_PROJECT_NUMBER="${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}"

          ## Environment variables specific to `apps/web`
          if [ "$APP_NAME" == "web" ]; then
            if [ "$ENVIRONMENT" == "production" ]; then
              BASE_URL="https://${DOMAIN:-"$PROJECT_NAME-$APP_NAME-$ENVIRONMENT-$GOOGLE_CLOUD_PROJECT_NUMBER-${{ vars.GOOGLE_CLOUD_REGION }}.run.app"}"
            else
              BASE_URL="https://dev.${DOMAIN:-$PROJECT_NAME-$APP_NAME-$ENVIRONMENT-$GOOGLE_CLOUD_PROJECT_NUMBER-${{ vars.GOOGLE_CLOUD_REGION }}.run.app}"
            fi
            export SERVICE_ACCOUNT="$PROJECT_NAME-cloudrun-sa@$GOOGLE_CLOUD_PROJECT_ID.iam.gserviceaccount.com"
            export CLOUD_RUN_API_SERVICE_URL="https://$PROJECT_NAME-api-$ENVIRONMENT-$GOOGLE_CLOUD_PROJECT_NUMBER.${{ vars.GOOGLE_CLOUD_REGION }}.run.app"
          fi

          ## Environment variables specific to `apps/api`
          if [ "$APP_NAME" == "api" ]; then
            export SERVICE_ACCOUNT="$PROJECT_NAME-cloudrun-sa@$GOOGLE_CLOUD_PROJECT_ID.iam.gserviceaccount.com"
            export CLOUD_RUN_API_SERVICE_URL="https://$SERVICE-${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}-${{ vars.GOOGLE_CLOUD_REGION }}.run.app"
          fi

          ## Environment variables specific to `apps/api`
          if [ "$APP_NAME" == "api" ]; then
            export BASE_URL="https://$SERVICE-${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}-${{ vars.GOOGLE_CLOUD_REGION }}.run.app"
            export SERVICE_ACCOUNT="$PROJECT_NAME-cloudrun-sa@$GOOGLE_CLOUD_PROJECT_ID.iam.gserviceaccount.com"
          fi

          ## NOTE: ...increase as `apps/**` is added

          ## Common environment variables by mode
          DOMAIN="${{ vars.DOMAIN }}"
          if [ "$ENVIRONMENT" == "production" ]; then
            export BASE_URL="https://${DOMAIN:-"$PROJECT_NAME-$APP_NAME-$ENVIRONMENT-$GOOGLE_CLOUD_PROJECT_NUMBER.${{ vars.GOOGLE_CLOUD_REGION }}.run.app"}"
          else
            HOST=${DOMAIN:+dev.$DOMAIN}
            export BASE_URL="https://${HOST:-$PROJECT_NAME-web-$ENVIRONMENT-$GOOGLE_CLOUD_PROJECT_NUMBER.${{ vars.GOOGLE_CLOUD_REGION }}.run.app}"
          fi

          ## Common environment variables
          export LOG_FORMAT="json"

          ## System
          export GITHUB_SHA="${{ github.sha }}"
          export CONTAINER_IMAGE="${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}"
          export CLOUD_RUN_SERVICE_NAME="$SERVICE"
          export GOOGLE_CLOUD_PROJECT_ID="$GOOGLE_CLOUD_PROJECT_ID"
          export GOOGLE_CLOUD_PROJECT_NUMBER="$GOOGLE_CLOUD_PROJECT_NUMBER"
          export ENVIRONMENT="$ENVIRONMENT"

          envsubst < ./apps/$APP_NAME/service.yaml > service-$ENVIRONMENT.yaml

      - name: Prepare and upsert secrets
        run: |
          GOOGLE_CLOUD_PROJECT_ID="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

          set -euo pipefail
          declare -A MAP

          if [ "${{ inputs.app_name }}" == "web" ]; then
            MAP["UPSTASH_REDIS_REST_URL"]="${{ secrets.UPSTASH_REDIS_REST_URL }}"
            MAP["UPSTASH_REDIS_REST_TOKEN"]="${{ secrets.UPSTASH_REDIS_REST_TOKEN }}"
          fi

          if [ "${{ inputs.app_name }}" == "api" ]; then
            MAP["MONGODB_USER_NAME"]="${{ secrets.MONGODB_USER_NAME }}"
            MAP["MONGODB_USER_PASSWORD"]="${{ secrets.MONGODB_USER_PASSWORD }}"
            MAP["MONGODB_HOST_NAME"]="${{ secrets.MONGODB_HOST_NAME }}"
            MAP["JWT_SECRET"]="${{ secrets.JWT_SECRET }}"
          fi

          if [ "${{ inputs.app_name }}" == "api" ]; then
            MAP["MONGODB_USER_NAME"]="${{ secrets.MONGODB_USER_NAME }}"
            MAP["MONGODB_USER_PASSWORD"]="${{ secrets.MONGODB_USER_PASSWORD }}"
            MAP["MONGODB_HOST_NAME"]="${{ secrets.MONGODB_HOST_NAME }}"
            MAP["JWT_SECRET"]="${{ secrets.JWT_SECRET }}"
            MAP["DISCORD_CLIENT_ID"]="${{ secrets.DISCORD_CLIENT_ID }}"
            MAP["DISCORD_CLIENT_SECRET"]="${{ secrets.DISCORD_CLIENT_SECRET }}"
            MAP["DISCORD_BOT_TOKEN"]="${{ secrets.DISCORD_BOT_TOKEN }}"
          fi

          if [ "${{ inputs.app_name }}" == "discordbot" ]; then
            MAP["DISCORD_BOT_TOKEN"]="${{ secrets.DISCORD_BOT_TOKEN }}"
          fi

          for name in "${!MAP[@]}"; do
            val="${MAP[$name]}"
            if gcloud secrets describe "$name" --project="$GOOGLE_CLOUD_PROJECT_ID" >/dev/null 2>&1; then
              echo "Adding new version for secret: $name"
              printf '%s' "$val" | gcloud secrets versions add "$name" --data-file=- --project="$GOOGLE_CLOUD_PROJECT_ID"
            else
              echo "Creating secret: $name"
              printf '%s' "$val" | gcloud secrets create "$name" --data-file=- --replication-policy="automatic" --project="$GOOGLE_CLOUD_PROJECT_ID"
            fi
          done

      #########################################################################
      # Deploy Google Cloudrun
      #########################################################################

      - name: Deploy to Cloud Run
        if: ${{ inputs.deploy_target == 'cloudrun' }}
        uses: google-github-actions/deploy-cloudrun@v2
        timeout-minutes: 5
        with:
          service: ${{ inputs.project_name }}-${{ inputs.app_name }}-${{ inputs.environment }}
          region: ${{ vars.GOOGLE_CLOUD_REGION }}
          metadata: service-${{ inputs.environment }}.yaml
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

      #########################################################################
      # Deploy Google Compute Engine
      #########################################################################

      - name: Deploy to Compute Engine
        if: ${{ inputs.deploy_target == 'compute' }}
        run: |
          PROJECT_NAME="${{ inputs.project_name }}"
          export APP_NAME="${{ inputs.app_name }}"
          export ENVIRONMENT="${{ inputs.environment }}"
          SERVICE="$PROJECT_NAME-$APP_NAME-$ENVIRONMENT"

          export GOOGLE_CLOUD_PROJECT_ID="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          GOOGLE_CLOUD_PROJECT_NUMBER="${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}"
          export REGION="${{ vars.GOOGLE_CLOUD_REGION }}"
          SERVICE_ACCOUNT="$PROJECT_NAME-vm-sa@$GOOGLE_CLOUD_PROJECT_ID.iam.gserviceaccount.com"
          export IMAGE="${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}"

          ZONE="${{ vars.GOOGLE_CLOUD_ZONE }}"
          VM="$SERVICE"
          MIG_NAME="$VM-mig"
          TEMPLATE_NAME="$VM-template"

          ## Environment variables specific to `apps/discordbot`
          if [ "$APP_NAME" == "discordbot" ]; then
            export CLOUD_RUN_API_SERVICE_URL="https://$SERVICE-$GOOGLE_CLOUD_PROJECT_NUMBER-$REGION.run.app"
            # Make these Secret Manager secret names available to the startup script
            # Comma-separated list; startup.sh supports SECRET_NAMES and SECRET_MAP
            export SECRET_NAMES="DISCORD_BOT_TOKEN"
          fi

          echo "Generating startup script from template"
          envsubst '${APP_NAME} ${IMAGE} ${REGION} ${ENVIRONMENT} ${GOOGLE_CLOUD_PROJECT_ID} ${CLOUD_RUN_API_SERVICE_URL} ${SECRET_NAMES} ${SECRET_MAP}' < ./apps/$APP_NAME/startup.sh > startup.sh

          echo "Creating instance template: ${TEMPLATE_NAME}"
          gcloud compute instance-templates create "${TEMPLATE_NAME}" \
            --project="${GOOGLE_CLOUD_PROJECT_ID}" \
            --machine-type=e2-medium \
            --image-family=cos-stable \
            --image-project=cos-cloud \
            --service-account="${SERVICE_ACCOUNT}" \
            --metadata-from-file=startup-script=./startup.sh || true

          # Create MIG if it does not exist
          if gcloud compute instance-groups managed describe "${MIG_NAME}" --zone="${ZONE}" --project="${GOOGLE_CLOUD_PROJECT_ID}" >/dev/null 2>&1; then
            echo "MIG ${MIG_NAME} exists. Updating template..."
            gcloud compute instance-groups managed set-instance-template "${MIG_NAME}" \
              --template="${TEMPLATE_NAME}" \
              --zone="${ZONE}" \
              --project="${GOOGLE_CLOUD_PROJECT_ID}"
          else
            echo "Creating MIG ${MIG_NAME} with initial template..."
            gcloud compute instance-groups managed create "${MIG_NAME}" \
              --base-instance-name="${PROJECT_NAME}-${APP_NAME}" \
              --size=1 \
              --template="${TEMPLATE_NAME}" \
              --zone="${ZONE}" \
              --project="${GOOGLE_CLOUD_PROJECT_ID}"
          fi

          echo "Starting rolling update for MIG ${MIG_NAME}"
          gcloud compute instance-groups managed rolling-action start-update "${MIG_NAME}" \
            --version=template="${TEMPLATE_NAME}" \
            --zone="${ZONE}" \
            --max-surge=1 \
            --max-unavailable=0 \
            --project="${GOOGLE_CLOUD_PROJECT_ID}"

          echo "Triggered rolling update for ${MIG_NAME} with template ${TEMPLATE_NAME}"

      - name: Grant SA invoker on API service
        run: |
          set -euo pipefail
          SERVICE="${{ inputs.project_name }}-api-${{ inputs.environment }}"
          REGION="${{ vars.GOOGLE_CLOUD_REGION }}"
          PROJECT="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          MEMBER="serviceAccount:${{ inputs.project_name }}-cloudrun-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"

          if gcloud run services describe "$SERVICE" --region="$REGION" --project="$PROJECT" >/dev/null 2>&1; then
            echo "API service found; binding invoker for $MEMBER"
            gcloud run services add-iam-policy-binding "$SERVICE" \
              --member="$MEMBER" \
              --role="roles/run.invoker" \
              --region="$REGION" \
              --project="$PROJECT"
          else
            echo "API service '$SERVICE' not found; skipping invoker binding."
          fi
