name: Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/**"
      - "packages/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "apps/**"
      - "packages/**"
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      api: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/**'
            api:
              - 'apps/api/**'
              - 'packages/**'

  setup:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true' || needs.changes.outputs.api == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 20.x
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache node modules
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn global add turbo
      - run: yarn install --frozen-lockfile

  test:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.result == 'success'
    strategy:
      matrix:
        target: [web]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 20.x
        uses: actions/setup-node@v2
        with:
          node-version: 20.x
      - name: Restore yarn cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn global add turbo
      - name: Prepare
        run: npx nps prepare.ci.${{ matrix.target }}
      - name: Build
        run: npx nps build.ci.${{ matrix.target }}
      - name: Test
        run: npx nps test.ci.${{ matrix.target }}
